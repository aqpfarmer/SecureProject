@page "/authenticated"
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation
@inject ILogger<Authenticated> Logger
@inject IJSRuntime JS

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <!-- Debug info, remove in production 
            <p><b>Debug:</b> @debugMessage</p>
            -->

            @if (userInfo == null)
            {
                <div class="alert alert-warning">User info could not be loaded. Please check your login or API connection.</div>
            }
            else
            {
                <div class="card mb-3 shadow-sm">
                    <div class="card-header bg-info text-dark">
                        <h5 class="mb-0">Your Tokens</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-2">
                            <strong>JWT Access Token:</strong>
                            <div class="alert alert-secondary" style="word-break:break-all;">
                                @accessToken
                            </div>
                        </div>
                        <div class="mb-2">
                            <strong>Refresh Token:</strong>
                            <div class="alert alert-secondary" style="word-break:break-all;">
                                @refreshToken
                            </div>
                        </div>
                        <div class="mb-2">
                            <button class="btn btn-warning" @onclick="HandleRefreshToken">Refresh My Token</button>
                            @if (!string.IsNullOrEmpty(refreshMessage))
                            {
                                <span class="ms-3 text-info">@refreshMessage</span>
                            }
                        </div>
                    </div>
                </div>
                <div class="card shadow-sm rounded">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">Welcome, @userInfo?.Name !</h4>
                    </div>
                    <div class="card-body">
                        <EditForm Model="editModel" OnValidSubmit="HandleSave">
                            <div class="row mb-2">
                                <div class="col-4 fw-bold">Email:</div>
                                <div class="col-8">
                                    <InputText class="form-control" @bind-Value="editModel.Email" />
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-4 fw-bold">Username:</div>
                                <div class="col-8">@userInfo?.Username</div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-4 fw-bold">Password:</div>
                                <div class="col-8">
                                    <InputText class="form-control" type="password" @bind-Value="editModel.Password" />
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-4"></div>
                                <div class="col-8">
                                    <button type="submit" class="btn btn-success">Save Changes</button>
                                    @if (!string.IsNullOrEmpty(saveMessage))
                                    {
                                        <span class="ms-3 text-success">@saveMessage</span>
                                    }
                                </div>
                            </div>
                        </EditForm>
                        <div class="row mb-2">
                            <div class="col-4 fw-bold">Roles:</div>
                            <div class="col-8">
                                @if (userInfo?.Roles != null)
                                {
                                    foreach (var role in userInfo.Roles.Split(','))
                                    {                                        
                                        <span class="badge bg-info text-dark me-1">@role.Trim() </span>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private SecureProject.Shared.Models.User userInfo;
    private string debugMessage = "Starting...";
    private EditModel editModel = new EditModel();
    private string saveMessage;
    private bool _loaded = false;
    private string accessToken = "";
    private string refreshToken = "";
    private string refreshMessage = "";
    private async Task HandleRefreshToken()
    {
        refreshMessage = "";
        var http = ClientFactory.CreateClient("SafeVaultApi");
        var payload = new { username = userInfo?.Username, refreshToken = refreshToken };
        var response = await http.PostAsJsonAsync("api/auth/refresh", payload);
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var doc = System.Text.Json.JsonDocument.Parse(json);
            accessToken = doc.RootElement.GetProperty("token").GetString();
            refreshToken = doc.RootElement.GetProperty("refreshToken").GetString();
            await JS.InvokeVoidAsync("localStorage.setItem", "token", accessToken);
            await JS.InvokeVoidAsync("localStorage.setItem", "refreshToken", refreshToken);
            refreshMessage = "Token refreshed!";
        }
        else
        {
            refreshMessage = "Failed to refresh token.";
        }
        StateHasChanged();
    }

    public class EditModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private string MaskedPassword => userInfo == null ? "" : new string('*', userInfo.Password?.Length ?? 8);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_loaded && firstRender)
        {
            _loaded = true;
            debugMessage = "Initializing...";
            accessToken = await JS.InvokeAsync<string>("localStorage.getItem", "token");
            refreshToken = await JS.InvokeAsync<string>("localStorage.getItem", "refreshToken");
            if (!string.IsNullOrEmpty(accessToken))
            {
                debugMessage = "Token found, parsing JWT...";
                var handler = new JwtSecurityTokenHandler();
                var jwtToken = handler.ReadJwtToken(accessToken);
                var username = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
                debugMessage = $"Parsed username: {username}";
                if (!string.IsNullOrEmpty(username))
                {
                    try
                    {
                        debugMessage = "Making API call...";
                        Logger.LogInformation($"Making API call to /api/users/{username}");
                        var http = ClientFactory.CreateClient("SafeVaultApi");
                        var request = new HttpRequestMessage(HttpMethod.Get, $"api/users/{username}");
                        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
                        var response = await http.SendAsync(request);
                        debugMessage = $"API response status: {response.StatusCode}";
                        if (response.IsSuccessStatusCode)
                        {
                            var rawJson = await response.Content.ReadAsStringAsync();
                            debugMessage = $"Raw user JSON: {rawJson}";
                            Logger.LogInformation($"Raw user JSON: {rawJson}");
                            userInfo = System.Text.Json.JsonSerializer.Deserialize<SecureProject.Shared.Models.User>(rawJson);
                            debugMessage = "User info loaded.";
                            // Initialize edit model
                            if (userInfo != null)
                            {
                                editModel.Email = userInfo.Email;
                                editModel.Password = string.Empty;
                            }
                        }
                        else
                        {
                            var errorJson = await response.Content.ReadAsStringAsync();
                            debugMessage = $"API error response: {errorJson}";
                            Logger.LogWarning($"API error response: {errorJson}");
                            userInfo = null;
                        }
                    }
                    catch (Exception ex)
                    {
                        userInfo = null;
                        debugMessage = $"Exception: {ex.Message}";
                        Logger.LogError(ex, "Error fetching user info");
                    }
                }
            }
            else
            {
                userInfo = null;
                debugMessage = "No token found.";
            }
            StateHasChanged();
        }
    }

    private async Task HandleSave()
    {
        saveMessage = string.Empty;
        if (userInfo == null) return;
        // Only validate password if user is changing it
        if (!string.IsNullOrEmpty(editModel.Password))
        {
            if (!IsPasswordStrong(editModel.Password))
            {
                saveMessage = "Password must be at least 12 characters and include upper, lower, digit, and special character.";
                return;
            }
        }
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");
        var http = ClientFactory.CreateClient("SafeVaultApi");
        var request = new HttpRequestMessage(HttpMethod.Put, $"api/users/{userInfo.Username}");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var updatePayload = new {
            password = editModel.Password,
            name = userInfo.Name,
            email = editModel.Email,
            roles = userInfo.Roles
        };
        request.Content = new StringContent(System.Text.Json.JsonSerializer.Serialize(updatePayload), System.Text.Encoding.UTF8, "application/json");
        var response = await http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            saveMessage = "Changes saved!";
            userInfo.Email = editModel.Email;
            if (!string.IsNullOrEmpty(editModel.Password))
            {
                userInfo.Password = editModel.Password;
            }
        }
        else
        {
            saveMessage = "Failed to save changes.";
        }
    }

    private bool IsPasswordStrong(string password)
    {
        return !string.IsNullOrEmpty(password) &&
            password.Length >= 12 &&
            System.Text.RegularExpressions.Regex.IsMatch(password, "[A-Z]") &&
            System.Text.RegularExpressions.Regex.IsMatch(password, "[a-z]") &&
            System.Text.RegularExpressions.Regex.IsMatch(password, "[0-9]") &&
            System.Text.RegularExpressions.Regex.IsMatch(password, @"[!@#$%^&*()_+\-=\[\]{};':"".,<>/?]");
    }
}
