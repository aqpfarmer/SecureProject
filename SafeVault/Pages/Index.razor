@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

@page "/"

<h3>Login to SafeVault</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="form-group">
		<label for="username">Username</label>
		<InputText id="username" class="form-control" @bind-Value="loginModel.Username" style="width: 25%;" />
	</div>
	<div class="form-group">
		<label for="password">Password</label>
		<InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" style="width: 25%;" />
	</div>
	<button type="submit" class="btn btn-primary">Login</button>

</EditForm>
<button class="btn btn-secondary mt-2" @onclick="NavigateToRegister">Register</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
	<div class="alert alert-danger">@errorMessage</div>
}

@code {
	private void NavigateToRegister()
	{
		Navigation.NavigateTo("/register");
	}
	private LoginModel loginModel = new LoginModel();
	private string errorMessage;

	public class LoginModel
	{
		[Required]
		[StringLength(50, MinimumLength = 3)]
		public string Username { get; set; }

		[Required]
		[StringLength(100, MinimumLength = 8)]
		public string Password { get; set; }
	}

	[Inject] NavigationManager Navigation { get; set; }
	@inject IJSRuntime JS
	@inject SafeVault.Services.AuthStateService AuthState

	private async Task HandleLogin()
	{
		if (!IsInputSafe(loginModel.Username) || !IsInputSafe(loginModel.Password))
		{
			errorMessage = "Invalid input detected.";
			return;
		}

		var http = new HttpClient();
		var payload = new {
			username = loginModel.Username,
			password = loginModel.Password
		};
		var response = await http.PostAsJsonAsync("https://localhost:7001/api/auth/login", payload);
		if (response.IsSuccessStatusCode)
		{
			errorMessage = null;
			var json = await response.Content.ReadAsStringAsync();
			var doc = System.Text.Json.JsonDocument.Parse(json);
			var token = doc.RootElement.GetProperty("token").GetString();
			var refreshToken = doc.RootElement.TryGetProperty("refreshToken", out var rtProp) ? rtProp.GetString() : "";
			// Store tokens in localStorage
			await JS.InvokeVoidAsync("localStorage.setItem", "token", token);
			await JS.InvokeVoidAsync("localStorage.setItem", "refreshToken", refreshToken);
			// Parse roles from token and update AuthState
			var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
			var jwtToken = handler.ReadJwtToken(token);
			var roles = jwtToken.Claims
				.Where(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
				.Select(c => c.Value)
				.ToList();
			AuthState.SetAuthenticated(roles);
			Navigation.NavigateTo("/authenticated", true);
		}
		else
		{
			errorMessage = "Login failed. Please check your credentials.";
		}
	}

	private bool IsInputSafe(string input)
	{
		if (string.IsNullOrWhiteSpace(input)) return false;
		string[] blacklist = { "'", "\"", "--", ";", "/*", "*/", "<", ">", "script", "drop", "insert", "update", "delete" };
		foreach (var bad in blacklist)
		{
			if (input.ToLower().Contains(bad)) return false;
		}
		return true;
	}
}
