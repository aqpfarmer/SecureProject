@page "/user"
@using Microsoft.AspNetCore.Components
@using System.Net.Http
@using System.Net.Http.Headers
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@inject NavigationManager Navigation
@inject SafeVault.Services.AuthStateService AuthState
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JS

@if (userRoles.Count == 0)
{
    <div class="container mt-5">
        <div class="alert alert-danger">
            <h4>Access Denied</h4>
            <p>You do not have permission to view this page.</p>
        </div>
    </div>
}
else
{
    <div class="container mt-5">
        <div class="card shadow-sm">
            <div class="card-header bg-light text-dark">
                <h3>User Dashboard</h3>
            </div>
            <div class="card-body">
                
                <div class="card shadow-sm rounded mt-4">
                    <div class="card-header bg-primary text-white">
                        <h4 class="mb-0">Welcome, @userInfo?.Name !</h4>
                    </div>
                    <div class="card-body">
                        <EditForm Model="editModel" OnValidSubmit="HandleSave">
                            <div class="row mb-2">
                                <div class="col-4 fw-bold">Email:</div>
                                <div class="col-8">
                                    <InputText class="form-control" @bind-Value="editModel.Email" />
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-4 fw-bold">Username:</div>
                                <div class="col-8">@userInfo?.Username</div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-4 fw-bold">Password:</div>
                                <div class="col-8">
                                    <InputText class="form-control" type="password" @bind-Value="editModel.Password" />
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-4"></div>
                                <div class="col-8">
                                    <button type="submit" class="btn btn-success">Save Changes</button>
                                    @if (!string.IsNullOrEmpty(saveMessage))
                                    {
                                        <span class="ms-3 text-success">@saveMessage</span>
                                    }
                                </div>
                            </div>
                        </EditForm>
                        <div class="row mb-2">
                            <div class="col-4 fw-bold">Roles:</div>
                            <div class="col-8">
                                @if (userInfo?.Roles != null)
                                {
                                    foreach (var role in userInfo.Roles.Split(','))
                                    {
                                        <span class="badge bg-info text-dark me-1">@role.Trim()</span>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        
    </div>

    
}

@code {
    private List<string> userRoles = new List<string>();
    private SecureProject.Shared.Models.User userInfo;
    private EditModel editModel = new EditModel();
    private string saveMessage;
    private bool _checkedRoles = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_checkedRoles && firstRender)
        {
            _checkedRoles = true;
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");
            if (!string.IsNullOrEmpty(token))
            {
                var handler = new JwtSecurityTokenHandler();
                var jwtToken = handler.ReadJwtToken(token);
                var username = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
                if (!string.IsNullOrEmpty(username))
                {
                    var http = ClientFactory.CreateClient("SafeVaultApi");
                    var request = new HttpRequestMessage(HttpMethod.Get, $"api/users/{username}");
                    request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
                    var response = await http.SendAsync(request);
                    if (response.IsSuccessStatusCode)
                    {
                        var rawJson = await response.Content.ReadAsStringAsync();
                        userInfo = System.Text.Json.JsonSerializer.Deserialize<SecureProject.Shared.Models.User>(rawJson);
                        userRoles = userInfo?.Roles?.Split(',').Select(r => r.Trim()).ToList() ?? new List<string>();
                        if (userInfo != null)
                        {
                            editModel.Email = userInfo.Email;
                            editModel.Password = string.Empty;
                        }
                        StateHasChanged();
                    }
                }
            }
        }
    }

    public class EditModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private async Task HandleSave()
    {
        saveMessage = string.Empty;
        if (userInfo == null) return;
        // Only validate password if user is changing it
        if (!string.IsNullOrEmpty(editModel.Password))
        {
            if (!IsPasswordStrong(editModel.Password))
            {
                saveMessage = "Password must be at least 12 characters and include upper, lower, digit, and special character.";
                return;
            }
        }
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");
        var http = ClientFactory.CreateClient("SafeVaultApi");
        var request = new HttpRequestMessage(HttpMethod.Put, $"api/users/{userInfo.Username}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var updatePayload = new {
            password = editModel.Password,
            name = userInfo.Name,
            email = editModel.Email,
            roles = userInfo.Roles
        };
        request.Content = new StringContent(System.Text.Json.JsonSerializer.Serialize(updatePayload), System.Text.Encoding.UTF8, "application/json");
        var response = await http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            saveMessage = "Changes saved!";
            userInfo.Email = editModel.Email;
            if (!string.IsNullOrEmpty(editModel.Password))
            {
                userInfo.Password = editModel.Password;
            }
        }
        else
        {
            saveMessage = "Failed to save changes.";
        }
    }

    private bool IsPasswordStrong(string password)
    {
        return !string.IsNullOrEmpty(password) &&
            password.Length >= 12 &&
            System.Text.RegularExpressions.Regex.IsMatch(password, "[A-Z]") &&
            System.Text.RegularExpressions.Regex.IsMatch(password, "[a-z]") &&
            System.Text.RegularExpressions.Regex.IsMatch(password, "[0-9]") &&
            System.Text.RegularExpressions.Regex.IsMatch(password, @"[!@#$%^&*()_+\-=\[\]{};':"".,<>/?]");
    }
}
